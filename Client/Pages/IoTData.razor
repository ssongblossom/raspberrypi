@page "/iotdata"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.SignalR.Client
@using blazorHub.Shared
@using System.IO.Ports
@inject HttpClient Http
@inject NavigationManager NavigationManager


<h1>IoT Data</h1>

<p>Current status : @toggle</p>
<button class="btn btn-primary" @onclick="Toggle">@toggle</button>

<p>
    Temp: <br>
    DHT11 - @data.DHT11Temp <br>
    DHT22 - @data.DHT22Temp <br>
    <br>
    Humidity: <br>
    DHT11 - @data.DHT11Humid <br>
    DHT22 - @data.DHT22Humid <br>
    <br>
    Light Intensity:  <br>
    DM460: @data.DM460LightIntensity <br>
    DM2007: @data.DM2007LightIntensity <br>
    <br>
    Air<br>
    CO: @data.CO <br>
    Alcohol: @data.Alcohol <br>
    CO2: @data.CO2 <br>
    Tolueno: @data.Tolueno <br>
    NH4: @data.NH4 <br>
    Acetona: @data.Acetona <br>

</p>

@code {
    bool toggle = false; //꺼짐
    private HubConnectionBuilder _hubConnectionBuilder { get; set; }
    private HubConnection hubConnection;
    private Func<ArduinoData, Task> handleReceiveData;

    private Func<bool, Task> handleSwitchStatus;
    ArduinoData data = new ArduinoData();

    protected override async Task OnInitializedAsync()
    {
        handleReceiveData += ReceiveData;
        var portConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/datahub"))
                    .WithAutomaticReconnect()
                    .Build();
        portConnection.On("ReceiveData", this.handleReceiveData);
        await portConnection.StartAsync();
        
        handleSwitchStatus += ReceiveSwitchStatus;
        hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/ctrlhub"))
                    .WithAutomaticReconnect()
                    .Build();
        hubConnection.On("ReceiveSwitchStatus", this.handleSwitchStatus);
        await hubConnection.StartAsync();
    }

    Task ReceiveData(ArduinoData recivedData)
    {
        data = recivedData;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveSwitchStatus(bool arg)
    {
        toggle = arg;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task Toggle()
    {
        await hubConnection.SendAsync("ReceiveSwitchStatus", toggle);
    }

}